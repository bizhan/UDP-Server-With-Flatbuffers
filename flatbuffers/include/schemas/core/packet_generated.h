// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PACKET_FBS_H_
#define FLATBUFFERS_GENERATED_PACKET_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {
struct Session;
struct GeneralResponse;
}  // namespace fbs

namespace fbs {

struct RequestPacket;

struct RequestPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *path() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<int8_t> *payload() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* path */) &&
           verifier.Verify(path()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* payload */) &&
           verifier.Verify(payload()) &&
           verifier.EndTable();
  }
};

struct RequestPacketBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) { fbb_.AddOffset(4, path); }
  void add_payload(flatbuffers::Offset<flatbuffers::Vector<int8_t>> payload) { fbb_.AddOffset(6, payload); }
  RequestPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RequestPacketBuilder &operator=(const RequestPacketBuilder &);
  flatbuffers::Offset<RequestPacket> Finish() {
    auto o = flatbuffers::Offset<RequestPacket>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<RequestPacket> CreateRequestPacket(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> path = 0,
   flatbuffers::Offset<flatbuffers::Vector<int8_t>> payload = 0) {
  RequestPacketBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_path(path);
  return builder_.Finish();
}

inline const fbs::RequestPacket *GetRequestPacket(const void *buf) { return flatbuffers::GetRoot<fbs::RequestPacket>(buf); }

inline bool VerifyRequestPacketBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::RequestPacket>(); }

inline void FinishRequestPacketBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::RequestPacket> root) { fbb.Finish(root); }

}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_PACKET_FBS_H_
