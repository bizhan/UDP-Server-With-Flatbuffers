// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_LOGIN_FBS_ACCOUNT_H_
#define FLATBUFFERS_GENERATED_LOGIN_FBS_ACCOUNT_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace fbs {
struct Session;
struct GeneralResponse;
}  // namespace fbs

namespace fbs {
namespace account {

struct LoginRequest;

struct LoginRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *username() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *password() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* username */) &&
           verifier.Verify(username()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* password */) &&
           verifier.Verify(password()) &&
           verifier.EndTable();
  }
};

struct LoginRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_username(flatbuffers::Offset<flatbuffers::String> username) { fbb_.AddOffset(4, username); }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) { fbb_.AddOffset(6, password); }
  LoginRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LoginRequestBuilder &operator=(const LoginRequestBuilder &);
  flatbuffers::Offset<LoginRequest> Finish() {
    auto o = flatbuffers::Offset<LoginRequest>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<LoginRequest> CreateLoginRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> username = 0,
   flatbuffers::Offset<flatbuffers::String> password = 0) {
  LoginRequestBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

inline const fbs::account::LoginRequest *GetLoginRequest(const void *buf) { return flatbuffers::GetRoot<fbs::account::LoginRequest>(buf); }

inline bool VerifyLoginRequestBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::account::LoginRequest>(); }

inline void FinishLoginRequestBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::account::LoginRequest> root) { fbb.Finish(root); }

}  // namespace account
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_LOGIN_FBS_ACCOUNT_H_
