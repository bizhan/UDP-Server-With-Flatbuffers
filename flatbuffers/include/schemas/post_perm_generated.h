// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_POSTPERM_FBS_POST_H_
#define FLATBUFFERS_GENERATED_POSTPERM_FBS_POST_H_

#include "flatbuffers/flatbuffers.h"


namespace fbs {
namespace post {

struct PostPermission;

enum PostPermissionType {
  PostPermissionType_PRIVATE = 0,
  PostPermissionType_ANY = 1,
  PostPermissionType_FRIENDS = 2,
  PostPermissionType_POSTER_DEFINED = 4
};

inline const char **EnumNamesPostPermissionType() {
  static const char *names[] = { "PRIVATE", "ANY", "FRIENDS", "", "POSTER_DEFINED", nullptr };
  return names;
}

inline const char *EnumNamePostPermissionType(PostPermissionType e) { return EnumNamesPostPermissionType()[static_cast<int>(e)]; }

struct PostPermission FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t type() const { return GetField<int8_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *user_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* user_list */) &&
           verifier.Verify(user_list()) &&
           verifier.VerifyVectorOfStrings(user_list()) &&
           verifier.EndTable();
  }
};

struct PostPermissionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int8_t type) { fbb_.AddElement<int8_t>(4, type, 0); }
  void add_user_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> user_list) { fbb_.AddOffset(6, user_list); }
  PostPermissionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PostPermissionBuilder &operator=(const PostPermissionBuilder &);
  flatbuffers::Offset<PostPermission> Finish() {
    auto o = flatbuffers::Offset<PostPermission>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PostPermission> CreatePostPermission(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t type = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> user_list = 0) {
  PostPermissionBuilder builder_(_fbb);
  builder_.add_user_list(user_list);
  builder_.add_type(type);
  return builder_.Finish();
}

}  // namespace post
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_POSTPERM_FBS_POST_H_
