// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ACCOUNT_FBS_ACCOUNT_H_
#define FLATBUFFERS_GENERATED_ACCOUNT_FBS_ACCOUNT_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace fbs {
struct Session;
struct GeneralResponse;
}  // namespace fbs

namespace fbs {
namespace account {

struct RegisterRequest;
struct LoginRequest;
struct LogoutRequest;
struct LogoutResponse;
struct RemoveAccountRequest;
struct RemoveAccountResponse;

struct RegisterRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *username() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *password() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* username */) &&
           verifier.Verify(username()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* password */) &&
           verifier.Verify(password()) &&
           verifier.EndTable();
  }
};

struct RegisterRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_username(flatbuffers::Offset<flatbuffers::String> username) { fbb_.AddOffset(4, username); }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) { fbb_.AddOffset(6, password); }
  RegisterRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RegisterRequestBuilder &operator=(const RegisterRequestBuilder &);
  flatbuffers::Offset<RegisterRequest> Finish() {
    auto o = flatbuffers::Offset<RegisterRequest>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<RegisterRequest> CreateRegisterRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> username = 0,
   flatbuffers::Offset<flatbuffers::String> password = 0) {
  RegisterRequestBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

struct LoginRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *username() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *password() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* username */) &&
           verifier.Verify(username()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* password */) &&
           verifier.Verify(password()) &&
           verifier.EndTable();
  }
};

struct LoginRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_username(flatbuffers::Offset<flatbuffers::String> username) { fbb_.AddOffset(4, username); }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) { fbb_.AddOffset(6, password); }
  LoginRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LoginRequestBuilder &operator=(const LoginRequestBuilder &);
  flatbuffers::Offset<LoginRequest> Finish() {
    auto o = flatbuffers::Offset<LoginRequest>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<LoginRequest> CreateLoginRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> username = 0,
   flatbuffers::Offset<flatbuffers::String> password = 0) {
  LoginRequestBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

struct LogoutRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session */) &&
           verifier.VerifyTable(session()) &&
           verifier.EndTable();
  }
};

struct LogoutRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(4, session); }
  LogoutRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LogoutRequestBuilder &operator=(const LogoutRequestBuilder &);
  flatbuffers::Offset<LogoutRequest> Finish() {
    auto o = flatbuffers::Offset<LogoutRequest>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<LogoutRequest> CreateLogoutRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<fbs::Session> session = 0) {
  LogoutRequestBuilder builder_(_fbb);
  builder_.add_session(session);
  return builder_.Finish();
}

struct LogoutResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  fbs::Status status_code() const { return static_cast<fbs::Status>(GetField<int8_t>(4, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* status_code */) &&
           verifier.EndTable();
  }
};

struct LogoutResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status_code(fbs::Status status_code) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(status_code), 0); }
  LogoutResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LogoutResponseBuilder &operator=(const LogoutResponseBuilder &);
  flatbuffers::Offset<LogoutResponse> Finish() {
    auto o = flatbuffers::Offset<LogoutResponse>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<LogoutResponse> CreateLogoutResponse(flatbuffers::FlatBufferBuilder &_fbb,
   fbs::Status status_code = fbs::Status_OK) {
  LogoutResponseBuilder builder_(_fbb);
  builder_.add_status_code(status_code);
  return builder_.Finish();
}

struct RemoveAccountRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session */) &&
           verifier.VerifyTable(session()) &&
           verifier.EndTable();
  }
};

struct RemoveAccountRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(4, session); }
  RemoveAccountRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RemoveAccountRequestBuilder &operator=(const RemoveAccountRequestBuilder &);
  flatbuffers::Offset<RemoveAccountRequest> Finish() {
    auto o = flatbuffers::Offset<RemoveAccountRequest>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<RemoveAccountRequest> CreateRemoveAccountRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<fbs::Session> session = 0) {
  RemoveAccountRequestBuilder builder_(_fbb);
  builder_.add_session(session);
  return builder_.Finish();
}

struct RemoveAccountResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  fbs::Status status_code() const { return static_cast<fbs::Status>(GetField<int8_t>(4, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* status_code */) &&
           verifier.EndTable();
  }
};

struct RemoveAccountResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status_code(fbs::Status status_code) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(status_code), 0); }
  RemoveAccountResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RemoveAccountResponseBuilder &operator=(const RemoveAccountResponseBuilder &);
  flatbuffers::Offset<RemoveAccountResponse> Finish() {
    auto o = flatbuffers::Offset<RemoveAccountResponse>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<RemoveAccountResponse> CreateRemoveAccountResponse(flatbuffers::FlatBufferBuilder &_fbb,
   fbs::Status status_code = fbs::Status_OK) {
  RemoveAccountResponseBuilder builder_(_fbb);
  builder_.add_status_code(status_code);
  return builder_.Finish();
}

inline const fbs::account::RemoveAccountResponse *GetRemoveAccountResponse(const void *buf) { return flatbuffers::GetRoot<fbs::account::RemoveAccountResponse>(buf); }

inline bool VerifyRemoveAccountResponseBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::account::RemoveAccountResponse>(); }

inline void FinishRemoveAccountResponseBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::account::RemoveAccountResponse> root) { fbb.Finish(root); }

}  // namespace account
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_ACCOUNT_FBS_ACCOUNT_H_
