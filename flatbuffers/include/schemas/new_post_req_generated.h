// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_NEWPOSTREQ_FBS_POST_H_
#define FLATBUFFERS_GENERATED_NEWPOSTREQ_FBS_POST_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"
#include "post_perm_generated.h"

namespace fbs {
struct Session;
struct GeneralResponse;
}  // namespace fbs
namespace fbs {
namespace post {
struct PostPermission;
}  // namespace post
}  // namespace fbs

namespace fbs {
namespace post {

struct NewPostRequest;

struct NewPostRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(4); }
  const flatbuffers::String *content() const { return GetPointer<const flatbuffers::String *>(6); }
  const fbs::post::PostPermission *permission() const { return GetPointer<const fbs::post::PostPermission *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session */) &&
           verifier.VerifyTable(session()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* content */) &&
           verifier.Verify(content()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* permission */) &&
           verifier.VerifyTable(permission()) &&
           verifier.EndTable();
  }
};

struct NewPostRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(4, session); }
  void add_content(flatbuffers::Offset<flatbuffers::String> content) { fbb_.AddOffset(6, content); }
  void add_permission(flatbuffers::Offset<fbs::post::PostPermission> permission) { fbb_.AddOffset(8, permission); }
  NewPostRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NewPostRequestBuilder &operator=(const NewPostRequestBuilder &);
  flatbuffers::Offset<NewPostRequest> Finish() {
    auto o = flatbuffers::Offset<NewPostRequest>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<NewPostRequest> CreateNewPostRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<fbs::Session> session = 0,
   flatbuffers::Offset<flatbuffers::String> content = 0,
   flatbuffers::Offset<fbs::post::PostPermission> permission = 0) {
  NewPostRequestBuilder builder_(_fbb);
  builder_.add_permission(permission);
  builder_.add_content(content);
  builder_.add_session(session);
  return builder_.Finish();
}

inline const fbs::post::NewPostRequest *GetNewPostRequest(const void *buf) { return flatbuffers::GetRoot<fbs::post::NewPostRequest>(buf); }

inline bool VerifyNewPostRequestBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::post::NewPostRequest>(); }

inline void FinishNewPostRequestBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::post::NewPostRequest> root) { fbb.Finish(root); }

}  // namespace post
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_NEWPOSTREQ_FBS_POST_H_
