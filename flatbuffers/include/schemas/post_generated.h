// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_POST_FBS_POST_H_
#define FLATBUFFERS_GENERATED_POST_FBS_POST_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace fbs {
struct Session;
struct GeneralResponse;
}  // namespace fbs

namespace fbs {
namespace post {

struct PostPermission;
struct NewPostRequest;
struct EditPostRequest;
struct EditPostPermissionRequest;
struct RemovePostRequest;

enum PostPermissionType {
  PostPermissionType_PRIVATE = 0,
  PostPermissionType_ANY = 1,
  PostPermissionType_FRIENDS = 2,
  PostPermissionType_POSTER_DEFINED = 4
};

inline const char **EnumNamesPostPermissionType() {
  static const char *names[] = { "PRIVATE", "ANY", "FRIENDS", "", "POSTER_DEFINED", nullptr };
  return names;
}

inline const char *EnumNamePostPermissionType(PostPermissionType e) { return EnumNamesPostPermissionType()[static_cast<int>(e)]; }

struct PostPermission FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int8_t type() const { return GetField<int8_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *user_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* user_list */) &&
           verifier.Verify(user_list()) &&
           verifier.VerifyVectorOfStrings(user_list()) &&
           verifier.EndTable();
  }
};

struct PostPermissionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int8_t type) { fbb_.AddElement<int8_t>(4, type, 0); }
  void add_user_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> user_list) { fbb_.AddOffset(6, user_list); }
  PostPermissionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PostPermissionBuilder &operator=(const PostPermissionBuilder &);
  flatbuffers::Offset<PostPermission> Finish() {
    auto o = flatbuffers::Offset<PostPermission>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PostPermission> CreatePostPermission(flatbuffers::FlatBufferBuilder &_fbb,
   int8_t type = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> user_list = 0) {
  PostPermissionBuilder builder_(_fbb);
  builder_.add_user_list(user_list);
  builder_.add_type(type);
  return builder_.Finish();
}

struct NewPostRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(4); }
  const flatbuffers::String *content() const { return GetPointer<const flatbuffers::String *>(6); }
  const PostPermission *psermission() const { return GetPointer<const PostPermission *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session */) &&
           verifier.VerifyTable(session()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* content */) &&
           verifier.Verify(content()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* psermission */) &&
           verifier.VerifyTable(psermission()) &&
           verifier.EndTable();
  }
};

struct NewPostRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(4, session); }
  void add_content(flatbuffers::Offset<flatbuffers::String> content) { fbb_.AddOffset(6, content); }
  void add_psermission(flatbuffers::Offset<PostPermission> psermission) { fbb_.AddOffset(8, psermission); }
  NewPostRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NewPostRequestBuilder &operator=(const NewPostRequestBuilder &);
  flatbuffers::Offset<NewPostRequest> Finish() {
    auto o = flatbuffers::Offset<NewPostRequest>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<NewPostRequest> CreateNewPostRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<fbs::Session> session = 0,
   flatbuffers::Offset<flatbuffers::String> content = 0,
   flatbuffers::Offset<PostPermission> psermission = 0) {
  NewPostRequestBuilder builder_(_fbb);
  builder_.add_psermission(psermission);
  builder_.add_content(content);
  builder_.add_session(session);
  return builder_.Finish();
}

struct EditPostRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(4); }
  uint64_t post_id() const { return GetField<uint64_t>(6, 0); }
  const flatbuffers::String *content() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session */) &&
           verifier.VerifyTable(session()) &&
           VerifyField<uint64_t>(verifier, 6 /* post_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* content */) &&
           verifier.Verify(content()) &&
           verifier.EndTable();
  }
};

struct EditPostRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(4, session); }
  void add_post_id(uint64_t post_id) { fbb_.AddElement<uint64_t>(6, post_id, 0); }
  void add_content(flatbuffers::Offset<flatbuffers::String> content) { fbb_.AddOffset(8, content); }
  EditPostRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EditPostRequestBuilder &operator=(const EditPostRequestBuilder &);
  flatbuffers::Offset<EditPostRequest> Finish() {
    auto o = flatbuffers::Offset<EditPostRequest>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<EditPostRequest> CreateEditPostRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<fbs::Session> session = 0,
   uint64_t post_id = 0,
   flatbuffers::Offset<flatbuffers::String> content = 0) {
  EditPostRequestBuilder builder_(_fbb);
  builder_.add_post_id(post_id);
  builder_.add_content(content);
  builder_.add_session(session);
  return builder_.Finish();
}

struct EditPostPermissionRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(4); }
  uint64_t post_id() const { return GetField<uint64_t>(6, 0); }
  const PostPermission *permission() const { return GetPointer<const PostPermission *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session */) &&
           verifier.VerifyTable(session()) &&
           VerifyField<uint64_t>(verifier, 6 /* post_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* permission */) &&
           verifier.VerifyTable(permission()) &&
           verifier.EndTable();
  }
};

struct EditPostPermissionRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(4, session); }
  void add_post_id(uint64_t post_id) { fbb_.AddElement<uint64_t>(6, post_id, 0); }
  void add_permission(flatbuffers::Offset<PostPermission> permission) { fbb_.AddOffset(8, permission); }
  EditPostPermissionRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EditPostPermissionRequestBuilder &operator=(const EditPostPermissionRequestBuilder &);
  flatbuffers::Offset<EditPostPermissionRequest> Finish() {
    auto o = flatbuffers::Offset<EditPostPermissionRequest>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<EditPostPermissionRequest> CreateEditPostPermissionRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<fbs::Session> session = 0,
   uint64_t post_id = 0,
   flatbuffers::Offset<PostPermission> permission = 0) {
  EditPostPermissionRequestBuilder builder_(_fbb);
  builder_.add_post_id(post_id);
  builder_.add_permission(permission);
  builder_.add_session(session);
  return builder_.Finish();
}

struct RemovePostRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(4); }
  uint64_t post_id() const { return GetField<uint64_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session */) &&
           verifier.VerifyTable(session()) &&
           VerifyField<uint64_t>(verifier, 6 /* post_id */) &&
           verifier.EndTable();
  }
};

struct RemovePostRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(4, session); }
  void add_post_id(uint64_t post_id) { fbb_.AddElement<uint64_t>(6, post_id, 0); }
  RemovePostRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RemovePostRequestBuilder &operator=(const RemovePostRequestBuilder &);
  flatbuffers::Offset<RemovePostRequest> Finish() {
    auto o = flatbuffers::Offset<RemovePostRequest>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<RemovePostRequest> CreateRemovePostRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<fbs::Session> session = 0,
   uint64_t post_id = 0) {
  RemovePostRequestBuilder builder_(_fbb);
  builder_.add_post_id(post_id);
  builder_.add_session(session);
  return builder_.Finish();
}

inline const fbs::post::RemovePostRequest *GetRemovePostRequest(const void *buf) { return flatbuffers::GetRoot<fbs::post::RemovePostRequest>(buf); }

inline bool VerifyRemovePostRequestBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::post::RemovePostRequest>(); }

inline void FinishRemovePostRequestBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::post::RemovePostRequest> root) { fbb.Finish(root); }

}  // namespace post
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_POST_FBS_POST_H_
