// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GETMAXPIDRESP_FBS_POST_H_
#define FLATBUFFERS_GENERATED_GETMAXPIDRESP_FBS_POST_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {
struct Session;
struct GeneralResponse;
}  // namespace fbs

namespace fbs {
namespace post {

struct GetMaxPidResponse;

struct GetMaxPidResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  fbs::Status status_code() const { return static_cast<fbs::Status>(GetField<int8_t>(4, 0)); }
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(6); }
  uint64_t max_post_id() const { return GetField<uint64_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* status_code */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* session */) &&
           verifier.VerifyTable(session()) &&
           VerifyField<uint64_t>(verifier, 8 /* max_post_id */) &&
           verifier.EndTable();
  }
};

struct GetMaxPidResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status_code(fbs::Status status_code) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(status_code), 0); }
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(6, session); }
  void add_max_post_id(uint64_t max_post_id) { fbb_.AddElement<uint64_t>(8, max_post_id, 0); }
  GetMaxPidResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GetMaxPidResponseBuilder &operator=(const GetMaxPidResponseBuilder &);
  flatbuffers::Offset<GetMaxPidResponse> Finish() {
    auto o = flatbuffers::Offset<GetMaxPidResponse>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<GetMaxPidResponse> CreateGetMaxPidResponse(flatbuffers::FlatBufferBuilder &_fbb,
   fbs::Status status_code = fbs::Status_OK,
   flatbuffers::Offset<fbs::Session> session = 0,
   uint64_t max_post_id = 0) {
  GetMaxPidResponseBuilder builder_(_fbb);
  builder_.add_max_post_id(max_post_id);
  builder_.add_session(session);
  builder_.add_status_code(status_code);
  return builder_.Finish();
}

inline const fbs::post::GetMaxPidResponse *GetGetMaxPidResponse(const void *buf) { return flatbuffers::GetRoot<fbs::post::GetMaxPidResponse>(buf); }

inline bool VerifyGetMaxPidResponseBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::post::GetMaxPidResponse>(); }

inline void FinishGetMaxPidResponseBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::post::GetMaxPidResponse> root) { fbb.Finish(root); }

}  // namespace post
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_GETMAXPIDRESP_FBS_POST_H_
