// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GETPOSTRESP_FBS_POST_H_
#define FLATBUFFERS_GENERATED_GETPOSTRESP_FBS_POST_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {
struct Session;
struct GeneralResponse;
}  // namespace fbs

namespace fbs {
namespace post {

struct GetPostResponse;

struct GetPostResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  fbs::Status status_code() const { return static_cast<fbs::Status>(GetField<int8_t>(4, 0)); }
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(6); }
  const flatbuffers::String *poster_name() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *poster_nickname() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *poster_addr() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::String *content() const { return GetPointer<const flatbuffers::String *>(14); }
  const flatbuffers::String *timestamp() const { return GetPointer<const flatbuffers::String *>(16); }
  int32_t like_num() const { return GetField<int32_t>(18, 0); }
  uint64_t max_comment_id() const { return GetField<uint64_t>(20, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* status_code */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* session */) &&
           verifier.VerifyTable(session()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* poster_name */) &&
           verifier.Verify(poster_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* poster_nickname */) &&
           verifier.Verify(poster_nickname()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* poster_addr */) &&
           verifier.Verify(poster_addr()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* content */) &&
           verifier.Verify(content()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* timestamp */) &&
           verifier.Verify(timestamp()) &&
           VerifyField<int32_t>(verifier, 18 /* like_num */) &&
           VerifyField<uint64_t>(verifier, 20 /* max_comment_id */) &&
           verifier.EndTable();
  }
};

struct GetPostResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status_code(fbs::Status status_code) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(status_code), 0); }
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(6, session); }
  void add_poster_name(flatbuffers::Offset<flatbuffers::String> poster_name) { fbb_.AddOffset(8, poster_name); }
  void add_poster_nickname(flatbuffers::Offset<flatbuffers::String> poster_nickname) { fbb_.AddOffset(10, poster_nickname); }
  void add_poster_addr(flatbuffers::Offset<flatbuffers::String> poster_addr) { fbb_.AddOffset(12, poster_addr); }
  void add_content(flatbuffers::Offset<flatbuffers::String> content) { fbb_.AddOffset(14, content); }
  void add_timestamp(flatbuffers::Offset<flatbuffers::String> timestamp) { fbb_.AddOffset(16, timestamp); }
  void add_like_num(int32_t like_num) { fbb_.AddElement<int32_t>(18, like_num, 0); }
  void add_max_comment_id(uint64_t max_comment_id) { fbb_.AddElement<uint64_t>(20, max_comment_id, 0); }
  GetPostResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GetPostResponseBuilder &operator=(const GetPostResponseBuilder &);
  flatbuffers::Offset<GetPostResponse> Finish() {
    auto o = flatbuffers::Offset<GetPostResponse>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<GetPostResponse> CreateGetPostResponse(flatbuffers::FlatBufferBuilder &_fbb,
   fbs::Status status_code = fbs::Status_OK,
   flatbuffers::Offset<fbs::Session> session = 0,
   flatbuffers::Offset<flatbuffers::String> poster_name = 0,
   flatbuffers::Offset<flatbuffers::String> poster_nickname = 0,
   flatbuffers::Offset<flatbuffers::String> poster_addr = 0,
   flatbuffers::Offset<flatbuffers::String> content = 0,
   flatbuffers::Offset<flatbuffers::String> timestamp = 0,
   int32_t like_num = 0,
   uint64_t max_comment_id = 0) {
  GetPostResponseBuilder builder_(_fbb);
  builder_.add_max_comment_id(max_comment_id);
  builder_.add_like_num(like_num);
  builder_.add_timestamp(timestamp);
  builder_.add_content(content);
  builder_.add_poster_addr(poster_addr);
  builder_.add_poster_nickname(poster_nickname);
  builder_.add_poster_name(poster_name);
  builder_.add_session(session);
  builder_.add_status_code(status_code);
  return builder_.Finish();
}

inline const fbs::post::GetPostResponse *GetGetPostResponse(const void *buf) { return flatbuffers::GetRoot<fbs::post::GetPostResponse>(buf); }

inline bool VerifyGetPostResponseBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::post::GetPostResponse>(); }

inline void FinishGetPostResponseBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::post::GetPostResponse> root) { fbb.Finish(root); }

}  // namespace post
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_GETPOSTRESP_FBS_POST_H_
