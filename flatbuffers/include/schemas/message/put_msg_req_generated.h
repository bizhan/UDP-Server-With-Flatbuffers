// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PUTMSGREQ_FBS_MSG_H_
#define FLATBUFFERS_GENERATED_PUTMSGREQ_FBS_MSG_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {
struct Session;
struct GeneralResponse;
}  // namespace fbs
namespace fbs {
namespace msg {
struct FileChunk;
struct StringContent;
struct MsgEntity;
struct ChannelEntity;
}  // namespace msg
}  // namespace fbs

namespace fbs {
namespace msg {

struct PutMsgRequest;

struct PutMsgRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(4); }
  const flatbuffers::String *channel_id() const { return GetPointer<const flatbuffers::String *>(6); }
  const fbs::msg::MsgEntity *msg() const { return GetPointer<const fbs::msg::MsgEntity *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session */) &&
           verifier.VerifyTable(session()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* channel_id */) &&
           verifier.Verify(channel_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* msg */) &&
           verifier.VerifyTable(msg()) &&
           verifier.EndTable();
  }
};

struct PutMsgRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(4, session); }
  void add_channel_id(flatbuffers::Offset<flatbuffers::String> channel_id) { fbb_.AddOffset(6, channel_id); }
  void add_msg(flatbuffers::Offset<fbs::msg::MsgEntity> msg) { fbb_.AddOffset(8, msg); }
  PutMsgRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PutMsgRequestBuilder &operator=(const PutMsgRequestBuilder &);
  flatbuffers::Offset<PutMsgRequest> Finish() {
    auto o = flatbuffers::Offset<PutMsgRequest>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<PutMsgRequest> CreatePutMsgRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<fbs::Session> session = 0,
   flatbuffers::Offset<flatbuffers::String> channel_id = 0,
   flatbuffers::Offset<fbs::msg::MsgEntity> msg = 0) {
  PutMsgRequestBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_channel_id(channel_id);
  builder_.add_session(session);
  return builder_.Finish();
}

inline const fbs::msg::PutMsgRequest *GetPutMsgRequest(const void *buf) { return flatbuffers::GetRoot<fbs::msg::PutMsgRequest>(buf); }

inline bool VerifyPutMsgRequestBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::msg::PutMsgRequest>(); }

inline void FinishPutMsgRequestBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::msg::PutMsgRequest> root) { fbb.Finish(root); }

}  // namespace msg
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_PUTMSGREQ_FBS_MSG_H_
