// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CREATECHANNELREQ_FBS_MSG_H_
#define FLATBUFFERS_GENERATED_CREATECHANNELREQ_FBS_MSG_H_

#include "flatbuffers/flatbuffers.h"

namespace fbs {
struct Session;
struct GeneralResponse;
}  // namespace fbs
namespace fbs {
namespace msg {
struct FileChunk;
struct StringContent;
struct MsgEntity;
struct ChannelEntity;
}  // namespace msg
}  // namespace fbs

namespace fbs {
namespace msg {

struct CreateChannel;

struct CreateChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fbs::Session *session() const { return GetPointer<const fbs::Session *>(4); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(6); }
  fbs::msg::ChannelType channel_type() const { return static_cast<fbs::msg::ChannelType>(GetField<int8_t>(8, 0)); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *member() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* session */) &&
           verifier.VerifyTable(session()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<int8_t>(verifier, 8 /* channel_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* member */) &&
           verifier.Verify(member()) &&
           verifier.VerifyVectorOfStrings(member()) &&
           verifier.EndTable();
  }
};

struct CreateChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session(flatbuffers::Offset<fbs::Session> session) { fbb_.AddOffset(4, session); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(6, name); }
  void add_channel_type(fbs::msg::ChannelType channel_type) { fbb_.AddElement<int8_t>(8, static_cast<int8_t>(channel_type), 0); }
  void add_member(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> member) { fbb_.AddOffset(10, member); }
  CreateChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CreateChannelBuilder &operator=(const CreateChannelBuilder &);
  flatbuffers::Offset<CreateChannel> Finish() {
    auto o = flatbuffers::Offset<CreateChannel>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<CreateChannel> CreateCreateChannel(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<fbs::Session> session = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   fbs::msg::ChannelType channel_type = fbs::msg::ChannelType_PRIVATE,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> member = 0) {
  CreateChannelBuilder builder_(_fbb);
  builder_.add_member(member);
  builder_.add_name(name);
  builder_.add_session(session);
  builder_.add_channel_type(channel_type);
  return builder_.Finish();
}

inline const fbs::msg::CreateChannel *GetCreateChannel(const void *buf) { return flatbuffers::GetRoot<fbs::msg::CreateChannel>(buf); }

inline bool VerifyCreateChannelBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fbs::msg::CreateChannel>(); }

inline void FinishCreateChannelBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fbs::msg::CreateChannel> root) { fbb.Finish(root); }

}  // namespace msg
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_CREATECHANNELREQ_FBS_MSG_H_
