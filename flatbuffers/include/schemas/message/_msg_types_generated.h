// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MSGTYPES_FBS_MSG_H_
#define FLATBUFFERS_GENERATED_MSGTYPES_FBS_MSG_H_

#include "flatbuffers/flatbuffers.h"


namespace fbs {
namespace msg {

struct FileChunk;
struct StringContent;
struct MsgEntity;
struct ChannelEntity;

enum MsgContent {
  MsgContent_NONE = 0,
  MsgContent_StringContent = 1,
  MsgContent_FileChunk = 2
};

inline const char **EnumNamesMsgContent() {
  static const char *names[] = { "NONE", "StringContent", "FileChunk", nullptr };
  return names;
}

inline const char *EnumNameMsgContent(MsgContent e) { return EnumNamesMsgContent()[static_cast<int>(e)]; }

inline bool VerifyMsgContent(flatbuffers::Verifier &verifier, const void *union_obj, MsgContent type);

enum ChannelType {
  ChannelType_PRIVATE = 0,
  ChannelType_GROUP = 1
};

inline const char **EnumNamesChannelType() {
  static const char *names[] = { "PRIVATE", "GROUP", nullptr };
  return names;
}

inline const char *EnumNameChannelType(ChannelType e) { return EnumNamesChannelType()[static_cast<int>(e)]; }

struct FileChunk FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *file_name() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t seq() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::Vector<int8_t> *data() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* file_name */) &&
           verifier.Verify(file_name()) &&
           VerifyField<int32_t>(verifier, 6 /* seq */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* data */) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct FileChunkBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_file_name(flatbuffers::Offset<flatbuffers::String> file_name) { fbb_.AddOffset(4, file_name); }
  void add_seq(int32_t seq) { fbb_.AddElement<int32_t>(6, seq, 0); }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> data) { fbb_.AddOffset(8, data); }
  FileChunkBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FileChunkBuilder &operator=(const FileChunkBuilder &);
  flatbuffers::Offset<FileChunk> Finish() {
    auto o = flatbuffers::Offset<FileChunk>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FileChunk> CreateFileChunk(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> file_name = 0,
   int32_t seq = 0,
   flatbuffers::Offset<flatbuffers::Vector<int8_t>> data = 0) {
  FileChunkBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_seq(seq);
  builder_.add_file_name(file_name);
  return builder_.Finish();
}

struct StringContent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *data() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* data */) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct StringContentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::String> data) { fbb_.AddOffset(4, data); }
  StringContentBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StringContentBuilder &operator=(const StringContentBuilder &);
  flatbuffers::Offset<StringContent> Finish() {
    auto o = flatbuffers::Offset<StringContent>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<StringContent> CreateStringContent(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> data = 0) {
  StringContentBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

struct MsgEntity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *sender() const { return GetPointer<const flatbuffers::String *>(4); }
  MsgContent content_type() const { return static_cast<MsgContent>(GetField<uint8_t>(6, 0)); }
  const void *content() const { return GetPointer<const void *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* sender */) &&
           verifier.Verify(sender()) &&
           VerifyField<uint8_t>(verifier, 6 /* content_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* content */) &&
           VerifyMsgContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

struct MsgEntityBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sender(flatbuffers::Offset<flatbuffers::String> sender) { fbb_.AddOffset(4, sender); }
  void add_content_type(MsgContent content_type) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(content_type), 0); }
  void add_content(flatbuffers::Offset<void> content) { fbb_.AddOffset(8, content); }
  MsgEntityBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MsgEntityBuilder &operator=(const MsgEntityBuilder &);
  flatbuffers::Offset<MsgEntity> Finish() {
    auto o = flatbuffers::Offset<MsgEntity>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MsgEntity> CreateMsgEntity(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> sender = 0,
   MsgContent content_type = MsgContent_NONE,
   flatbuffers::Offset<void> content = 0) {
  MsgEntityBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_sender(sender);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

struct ChannelEntity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  ChannelType type() const { return static_cast<ChannelType>(GetField<int8_t>(4, 0)); }
  const flatbuffers::String *channel_id() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *display_name() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* channel_id */) &&
           verifier.Verify(channel_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* display_name */) &&
           verifier.Verify(display_name()) &&
           verifier.EndTable();
  }
};

struct ChannelEntityBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(ChannelType type) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(type), 0); }
  void add_channel_id(flatbuffers::Offset<flatbuffers::String> channel_id) { fbb_.AddOffset(6, channel_id); }
  void add_display_name(flatbuffers::Offset<flatbuffers::String> display_name) { fbb_.AddOffset(8, display_name); }
  ChannelEntityBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChannelEntityBuilder &operator=(const ChannelEntityBuilder &);
  flatbuffers::Offset<ChannelEntity> Finish() {
    auto o = flatbuffers::Offset<ChannelEntity>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<ChannelEntity> CreateChannelEntity(flatbuffers::FlatBufferBuilder &_fbb,
   ChannelType type = ChannelType_PRIVATE,
   flatbuffers::Offset<flatbuffers::String> channel_id = 0,
   flatbuffers::Offset<flatbuffers::String> display_name = 0) {
  ChannelEntityBuilder builder_(_fbb);
  builder_.add_display_name(display_name);
  builder_.add_channel_id(channel_id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyMsgContent(flatbuffers::Verifier &verifier, const void *union_obj, MsgContent type) {
  switch (type) {
    case MsgContent_NONE: return true;
    case MsgContent_StringContent: return verifier.VerifyTable(reinterpret_cast<const StringContent *>(union_obj));
    case MsgContent_FileChunk: return verifier.VerifyTable(reinterpret_cast<const FileChunk *>(union_obj));
    default: return false;
  }
}

}  // namespace msg
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_MSGTYPES_FBS_MSG_H_
